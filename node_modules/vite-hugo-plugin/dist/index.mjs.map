{"version":3,"sources":["../src/index.ts","../src/utils/get-html-pages.ts","../src/utils/get-hugo-config.ts"],"sourcesContent":["import { Plugin, PluginOption } from \"vite\";\nimport { resolve } from \"path\";\nimport { getHtmlPages, getHugoConfig } from \"./utils\";\n\nexport interface Options {\n  /**\n   * Output path to hugo build directory.\n   */\n  hugoOutDir: string;\n\n  /**\n   * Root directory of an application.\n   */\n  appDir: string;\n\n  /**\n   * Patterns to ignore html input files for rollup.\n   */\n  ignoreHTMLFiles?: string[];\n\n  /**\n   * Hugo config file name. By default is set to `hugo.toml`.\n   */\n  hugoConfigFileName?: string;\n}\nfunction hugoPlugin({\n  hugoOutDir,\n  appDir,\n  ignoreHTMLFiles = [],\n  hugoConfigFileName = \"hugo.toml\",\n}: Options): PluginOption {\n  const hugoConfig = getHugoConfig(appDir, hugoConfigFileName);\n\n  const ignoreBuildPaths: string[] = [];\n\n  // Ignore default content language as hugo build it into out dir instead of language dir.\n  if (hugoConfig.defaultContentLanguage) {\n    ignoreBuildPaths.push(\n      resolve(hugoOutDir, hugoConfig.defaultContentLanguage)\n    );\n  }\n\n  const hugo: Plugin = {\n    name: \"vite-plugin-hugo\",\n    config: () => ({\n      root: hugoOutDir,\n      resolve: {\n        // Resolve aliases\n        alias: {\n          // Resolving path in imports.\n          js: resolve(appDir, \"assets\", \"js\"),\n          \"/assets\": resolve(appDir, \"assets\"),\n          \"/plugins\": resolve(hugoOutDir, \"plugins\"),\n        },\n      },\n      build: {\n        // Build vite into the same directory as hugo\n        outDir: hugoOutDir,\n        // Vite will build app on top of the files generated by hugo build.\n        emptyOutDir: false,\n        rollupOptions: {\n          // Routing\n          input: getHtmlPages(hugoOutDir, [\n            ...ignoreBuildPaths,\n            ...ignoreHTMLFiles,\n          ]),\n        },\n      },\n    }),\n  };\n\n  return hugo;\n}\n\nexport default hugoPlugin\n","import { resolve } from 'path';\nimport { sync as getFilesSync } from 'fast-glob';\nconst normalize = require('normalize-path');\n\ntype InputsOption = {\n    [key: string]: string\n}\n\n/**\n * Gets html pages paths from `pagesDir`.\n * @param pagesDir root directory of pages\n * @param ignore An array of glob patterns to exclude matches.\n */\nexport default function getHtmlPages(pagesDir: string, ignore: string[]): InputsOption {\n    const path = normalize(resolve(pagesDir, '**', '*.html'));\n\n    const pages = getFilesSync(path, {\n        ignore\n    })\n\n    const inputs: InputsOption = {};\n\n    pages.forEach((input) => {\n        const key = input.replace(pagesDir, '').substring(1);\n        inputs[key] = input;\n    })\n\n    return inputs;\n}","import { readFileSync, readdirSync } from \"fs\";\nimport { extname } from \"path\";\nimport toml from \"toml\";\nimport yaml from \"yaml\";\n\n/**\n * Linting important hugo config.\n */\ntype LintHugoConfigProperties = {\n  defaultContentLanguage?: string;\n};\n\n/**\n * Gets hugo config, function supports toml|yaml|json extensions.\n * @param appDir directory where `config.toml` is located.\n * @param hugoConfigFileName name of the hugo config file.\n */\nexport default function getHugoConfig(\n  appDir: string,\n  hugoConfigFileName: string\n): LintHugoConfigProperties {\n  const configFiles = readdirSync(appDir).filter((file) =>\n    file.endsWith(hugoConfigFileName)\n  );\n  if (!configFiles.length) {\n    throw new Error(\n      `No hugo config file found with name: ${appDir}/${hugoConfigFileName}`\n    );\n  }\n\n  const configFile = configFiles[0]; // there can only be one\n  const configType = extname(configFile).substring(1);\n  const configString = readFileSync(configFile, \"utf-8\");\n\n  if (configType === \"toml\") {\n    return toml.parse(configString);\n  }\n\n  if (configType === \"json\") {\n    return JSON.parse(configString);\n  }\n\n  if (configType === \"yaml\") {\n    return yaml.parse(configString);\n  }\n\n  throw new Error(\"Unrecognized hugo config file format\");\n}\n"],"mappings":";;;;;;;;;AACA,SAAS,WAAAA,gBAAe;;;ACDxB,SAAS,eAAe;AACxB,SAAS,QAAQ,oBAAoB;AACrC,IAAM,YAAY,UAAQ,gBAAgB;AAW3B,SAAR,aAA8B,UAAkB,QAAgC;AACnF,QAAM,OAAO,UAAU,QAAQ,UAAU,MAAM,QAAQ,CAAC;AAExD,QAAM,QAAQ,aAAa,MAAM;AAAA,IAC7B;AAAA,EACJ,CAAC;AAED,QAAM,SAAuB,CAAC;AAE9B,QAAM,QAAQ,CAAC,UAAU;AACrB,UAAM,MAAM,MAAM,QAAQ,UAAU,EAAE,EAAE,UAAU,CAAC;AACnD,WAAO,GAAG,IAAI;AAAA,EAClB,CAAC;AAED,SAAO;AACX;;;AC5BA,SAAS,cAAc,mBAAmB;AAC1C,SAAS,eAAe;AACxB,OAAO,UAAU;AACjB,OAAO,UAAU;AAcF,SAAR,cACL,QACA,oBAC0B;AAC1B,QAAM,cAAc,YAAY,MAAM,EAAE;AAAA,IAAO,CAAC,SAC9C,KAAK,SAAS,kBAAkB;AAAA,EAClC;AACA,MAAI,CAAC,YAAY,QAAQ;AACvB,UAAM,IAAI;AAAA,MACR,wCAAwC,MAAM,IAAI,kBAAkB;AAAA,IACtE;AAAA,EACF;AAEA,QAAM,aAAa,YAAY,CAAC;AAChC,QAAM,aAAa,QAAQ,UAAU,EAAE,UAAU,CAAC;AAClD,QAAM,eAAe,aAAa,YAAY,OAAO;AAErD,MAAI,eAAe,QAAQ;AACzB,WAAO,KAAK,MAAM,YAAY;AAAA,EAChC;AAEA,MAAI,eAAe,QAAQ;AACzB,WAAO,KAAK,MAAM,YAAY;AAAA,EAChC;AAEA,MAAI,eAAe,QAAQ;AACzB,WAAO,KAAK,MAAM,YAAY;AAAA,EAChC;AAEA,QAAM,IAAI,MAAM,sCAAsC;AACxD;;;AFtBA,SAAS,WAAW;AAAA,EAClB;AAAA,EACA;AAAA,EACA,kBAAkB,CAAC;AAAA,EACnB,qBAAqB;AACvB,GAA0B;AACxB,QAAM,aAAa,cAAc,QAAQ,kBAAkB;AAE3D,QAAM,mBAA6B,CAAC;AAGpC,MAAI,WAAW,wBAAwB;AACrC,qBAAiB;AAAA,MACfC,SAAQ,YAAY,WAAW,sBAAsB;AAAA,IACvD;AAAA,EACF;AAEA,QAAM,OAAe;AAAA,IACnB,MAAM;AAAA,IACN,QAAQ,OAAO;AAAA,MACb,MAAM;AAAA,MACN,SAAS;AAAA;AAAA,QAEP,OAAO;AAAA;AAAA,UAEL,IAAIA,SAAQ,QAAQ,UAAU,IAAI;AAAA,UAClC,WAAWA,SAAQ,QAAQ,QAAQ;AAAA,UACnC,YAAYA,SAAQ,YAAY,SAAS;AAAA,QAC3C;AAAA,MACF;AAAA,MACA,OAAO;AAAA;AAAA,QAEL,QAAQ;AAAA;AAAA,QAER,aAAa;AAAA,QACb,eAAe;AAAA;AAAA,UAEb,OAAO,aAAa,YAAY;AAAA,YAC9B,GAAG;AAAA,YACH,GAAG;AAAA,UACL,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;AAEA,IAAO,cAAQ;","names":["resolve","resolve"]}