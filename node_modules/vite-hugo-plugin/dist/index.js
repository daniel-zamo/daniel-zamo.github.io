"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => src_default
});
module.exports = __toCommonJS(src_exports);
var import_path3 = require("path");

// src/utils/get-html-pages.ts
var import_path = require("path");
var import_fast_glob = require("fast-glob");
var normalize = require("normalize-path");
function getHtmlPages(pagesDir, ignore) {
  const path = normalize((0, import_path.resolve)(pagesDir, "**", "*.html"));
  const pages = (0, import_fast_glob.sync)(path, {
    ignore
  });
  const inputs = {};
  pages.forEach((input) => {
    const key = input.replace(pagesDir, "").substring(1);
    inputs[key] = input;
  });
  return inputs;
}

// src/utils/get-hugo-config.ts
var import_fs = require("fs");
var import_path2 = require("path");
var import_toml = __toESM(require("toml"));
var import_yaml = __toESM(require("yaml"));
function getHugoConfig(appDir, hugoConfigFileName) {
  const configFiles = (0, import_fs.readdirSync)(appDir).filter(
    (file) => file.endsWith(hugoConfigFileName)
  );
  if (!configFiles.length) {
    throw new Error(
      `No hugo config file found with name: ${appDir}/${hugoConfigFileName}`
    );
  }
  const configFile = configFiles[0];
  const configType = (0, import_path2.extname)(configFile).substring(1);
  const configString = (0, import_fs.readFileSync)(configFile, "utf-8");
  if (configType === "toml") {
    return import_toml.default.parse(configString);
  }
  if (configType === "json") {
    return JSON.parse(configString);
  }
  if (configType === "yaml") {
    return import_yaml.default.parse(configString);
  }
  throw new Error("Unrecognized hugo config file format");
}

// src/index.ts
function hugoPlugin({
  hugoOutDir,
  appDir,
  ignoreHTMLFiles = [],
  hugoConfigFileName = "hugo.toml"
}) {
  const hugoConfig = getHugoConfig(appDir, hugoConfigFileName);
  const ignoreBuildPaths = [];
  if (hugoConfig.defaultContentLanguage) {
    ignoreBuildPaths.push(
      (0, import_path3.resolve)(hugoOutDir, hugoConfig.defaultContentLanguage)
    );
  }
  const hugo = {
    name: "vite-plugin-hugo",
    config: () => ({
      root: hugoOutDir,
      resolve: {
        // Resolve aliases
        alias: {
          // Resolving path in imports.
          js: (0, import_path3.resolve)(appDir, "assets", "js"),
          "/assets": (0, import_path3.resolve)(appDir, "assets"),
          "/plugins": (0, import_path3.resolve)(hugoOutDir, "plugins")
        }
      },
      build: {
        // Build vite into the same directory as hugo
        outDir: hugoOutDir,
        // Vite will build app on top of the files generated by hugo build.
        emptyOutDir: false,
        rollupOptions: {
          // Routing
          input: getHtmlPages(hugoOutDir, [
            ...ignoreBuildPaths,
            ...ignoreHTMLFiles
          ])
        }
      }
    })
  };
  return hugo;
}
var src_default = hugoPlugin;
module.exports = module.exports.default;
//# sourceMappingURL=index.js.map